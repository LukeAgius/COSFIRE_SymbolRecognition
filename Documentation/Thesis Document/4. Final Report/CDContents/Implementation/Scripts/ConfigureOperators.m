function configuration = ConfigureOperators(params,noOfSymbols)

display(' ')
display('=========== 1. CONFIGURATION STAGE ===========')

    % Cell holding matrices for each COSFIRE operator. The number of
    % operators is now the number of symbols * the number of filters per
    % proto type.
    listOfCOSFIREOperators = cell(1,noOfSymbols*params.NFiltersPerProtoType);             

    % If load from file switch is on
    if params.loadConfigurationFromFile == 1
        % listOfCOSFIREOperators from disk
        load(['../Intermediate Results/' params.TestingFolder '/Check Points/COSFIREOPERATORS.mat'],'listOfCOSFIREOperators');
    else
        % Getting List of images in the models  folder
        models = dir([Utilities.getModelsDirectory(params), ['*' params.ModelsExtension]]);

        % Index to be used to save operators with each loop
        index = 1;
        
        % For each Symbol Model Image
        for modelsIndex=1:size(models,1)
            % Display the number to keep track of where the loop currently is.
            display([ 'Configuring model ' models(modelsIndex).name]);             

            % Loading images. If statement due to 0 or 00 in the images' titles.
            configurationImage = imresize(imread([Utilities.getModelsDirectory(params) models(modelsIndex).name]),0.5);

            % Init Cell containing all the operators for the symbol
            operatorsForSymbol = cell(0);      
            
            % Init vector holding the gabor input
            gaborinput = [];
            
            % Init t (time) to 0.
            t = 0;
            
            % Find positions where value in Configuration image is equal to 0
            [r,c] = find(configurationImage == 0);
            
            % While the number of operators per symbol availabe is less
            % than what specified in experiment parameters
            while numel(operatorsForSymbol) < params.NFiltersPerProtoType
                
                % Init list of possible locations where to set filters
                possiblelocations = [r c];
                
                % Init locations vector, holding x,y coordinates for the operators 
                locations = zeros(params.NFiltersPerProtoType,2);
                
                % Init rr
                rr=exp(-t/2)*2*max(params.rholist);
                
                % Cell containing all the operators for the symbol
                operatorsForSymbol = cell(0);      

                % Looping according to how many filters are to be set per
                % model
                for filterIndex = 1:params.NFiltersPerProtoType
                    
                    % Init ntuples which will hold the number of tuples
                    % generated by each filter. noriens which will hold the
                    % number of distinct orientations the filter holds and
                    % nrhos which will hold the distinct rho used.
                    ntuples = 0; noriens = 0;  nrhos   = 0;


                    % While the number of ntuples is less than what
                    % specified in the experiment parameters or the number
                    % of distinct orientations is less than what specified
                    % in the parameters and number of rhos used is not
                    % equal to the size of the specified rho list and while
                    % possible locations vector is not empty
                    while (ntuples < params.minNumberOfTuplesPerFilter || ...
                           noriens < params.minNumberOfDistinctOrientationsPerFilter || ...
                           nrhos ~= length(params.rholist )) && ...
                           ~isempty(possiblelocations)            

                                % Create a random location within the
                                % possible locations vector.
                                rndloc = ceil(rand * size(possiblelocations,1));
                                
                                % Current iteration's filter's locations
                                % according to the randloc
                                locations(filterIndex,:) = possiblelocations(rndloc,:);
                                
                                % According to the created location we also
                                % take all the pixels covered by the
                                % maximum rho list value by using the circle equation. 
                                idx = ((possiblelocations(:,1) - locations(filterIndex,1)).^2 + ...
                                       (possiblelocations(:,2) - locations(filterIndex,2)).^2) < (rr)^2;

                                
                                % The current iteration's filter is created by configuring a COSFIRE filter for the
                                % current configuration image, with the locations created above for this filter
                                [operatorsForSymbol{filterIndex},gaborinput] = configureCOSFIRE(configurationImage, ...
                                                                                                round(locations(filterIndex,:)),...
                                                                                                gaborinput);    
                                
                                
                                % The number of tuples, distinct orientations and rho values are extracted from the current filter
                                ntuples = size(operatorsForSymbol{filterIndex}.tuples,2);
                                noriens = numel(unique(operatorsForSymbol{filterIndex}.tuples(2,:)));
                                nrhos = numel(unique(operatorsForSymbol{filterIndex}.tuples(3,:)));
                                
                                
                                % if the filter's number of tuples is greater or equal to the specified one and
                                % the numberof distinct orientations is greater than the specified -1 and the
                                % number of rhos values in the filter is equal to the number of rho list in the
                                % parameters
                                if ntuples >= params.minNumberOfTuplesPerFilter && ...
                                   noriens > params.minNumberOfDistinctOrientationsPerFilter-1 && ...
                                   nrhos == length(params.rholist)
                               
                                    % Set the pixels covered by the largest rho value in the possible
                                    % locations vector to nothing 
                                    possiblelocations(idx,:) = [];
                                else
                                    
                                    % else set only the random location
                                    % where the filter was placed.
                                    possiblelocations(rndloc,:) = [];
                                end        
                    end 

                    % If the number of possible locations is exhausted
                    if isempty(possiblelocations)
                        % Set the current filter's operator to nothing
                        operatorsForSymbol(filterIndex) = [];
                        
                        % Break current loop.
                        break;
                    end
                end
                
                % Incrememt t/time by 1.
                t=t+1;
            end
      
            % Setting the new operators for this symbol into the list of
            % all operators 
            for k=0:params.NFiltersPerProtoType-1
                listOfCOSFIREOperators{index+k} = operatorsForSymbol{k+1};
            end

            % Updating Index for the next iteration.
            index = index+params.NFiltersPerProtoType;
        end

        % Saving listOfCOSFIREOperators to disk
        save(['../Intermediate Results/' params.TestingFolder '/Check Points/COSFIREOPERATORS.mat'],'listOfCOSFIREOperators');
    end

    % Return listOfCOSFIREOperators as the list of configured COSFIRE
    % operators. 50 in total which reflect one COSFIRE operator for each
    % symbol model image.
    configuration = listOfCOSFIREOperators;
end